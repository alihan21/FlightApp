// <auto-generated />
using System;
using FlightApp.Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FlightApp.Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200828151426_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FlightApp.Backend.Models.Domain.Channel", b =>
                {
                    b.Property<int>("ChannelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("ChannelId");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("FlightApp.Backend.Models.Domain.Flight", b =>
                {
                    b.Property<string>("FlightId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Destination");

                    b.Property<double>("FlightDuration");

                    b.Property<string>("Origin");

                    b.Property<int?>("PlaneId");

                    b.Property<DateTime>("TimeOfDepart");

                    b.HasKey("FlightId");

                    b.HasIndex("PlaneId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("FlightApp.Backend.Models.Domain.Food", b =>
                {
                    b.Property<int>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.Property<string>("Type");

                    b.HasKey("FoodId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("FlightApp.Backend.Models.Domain.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChannelId");

                    b.Property<int?>("PassengerUserId");

                    b.Property<string>("Text");

                    b.HasKey("MessageId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("PassengerUserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("FlightApp.Backend.Models.Domain.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text");

                    b.Property<string>("Type");

                    b.HasKey("NotificationId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("FlightApp.Backend.Models.Domain.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCompleted");

                    b.Property<int?>("PassengerUserId");

                    b.HasKey("OrderId");

                    b.HasIndex("PassengerUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FlightApp.Backend.Models.Domain.OrderLine", b =>
                {
                    b.Property<int>("OrderId");

                    b.Property<int>("FoodId");

                    b.Property<int>("Quantity");

                    b.HasKey("OrderId", "FoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("OrderLine");
                });

            modelBuilder.Entity("FlightApp.Backend.Models.Domain.Plane", b =>
                {
                    b.Property<int>("PlaneId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaxSeats");

                    b.Property<string>("Name");

                    b.HasKey("PlaneId");

                    b.ToTable("Planes");
                });

            modelBuilder.Entity("FlightApp.Backend.Models.Domain.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PlaneId");

                    b.Property<string>("SeatNumber");

                    b.HasKey("SeatId");

                    b.HasIndex("PlaneId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("FlightApp.Backend.Models.Domain.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name");

                    b.Property<int?>("SeatId");

                    b.HasKey("UserId");

                    b.HasIndex("SeatId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("FlightApp.Backend.Models.Domain.UserFlight", b =>
                {
                    b.Property<string>("FlightId");

                    b.Property<int>("UserId");

                    b.HasKey("FlightId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFlights");
                });

            modelBuilder.Entity("FlightApp.Backend.Models.Domain.Passenger", b =>
                {
                    b.HasBaseType("FlightApp.Backend.Models.Domain.User");

                    b.Property<int>("ChannelId");

                    b.Property<bool>("IsNotificationRead");

                    b.Property<int?>("NotificationId");

                    b.HasIndex("NotificationId");

                    b.HasDiscriminator().HasValue("Passenger");
                });

            modelBuilder.Entity("FlightApp.Backend.Models.Domain.Staff", b =>
                {
                    b.HasBaseType("FlightApp.Backend.Models.Domain.User");

                    b.Property<int>("LoginCode");

                    b.HasDiscriminator().HasValue("Staff");
                });

            modelBuilder.Entity("FlightApp.Backend.Models.Domain.Flight", b =>
                {
                    b.HasOne("FlightApp.Backend.Models.Domain.Plane", "Plane")
                        .WithMany("PlaneFlights")
                        .HasForeignKey("PlaneId");
                });

            modelBuilder.Entity("FlightApp.Backend.Models.Domain.Message", b =>
                {
                    b.HasOne("FlightApp.Backend.Models.Domain.Channel")
                        .WithMany("Messages")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlightApp.Backend.Models.Domain.Passenger", "Passenger")
                        .WithMany()
                        .HasForeignKey("PassengerUserId");
                });

            modelBuilder.Entity("FlightApp.Backend.Models.Domain.Order", b =>
                {
                    b.HasOne("FlightApp.Backend.Models.Domain.Passenger", "Passenger")
                        .WithMany("Orders")
                        .HasForeignKey("PassengerUserId");
                });

            modelBuilder.Entity("FlightApp.Backend.Models.Domain.OrderLine", b =>
                {
                    b.HasOne("FlightApp.Backend.Models.Domain.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlightApp.Backend.Models.Domain.Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FlightApp.Backend.Models.Domain.Seat", b =>
                {
                    b.HasOne("FlightApp.Backend.Models.Domain.Plane", "Plane")
                        .WithMany("Seats")
                        .HasForeignKey("PlaneId");
                });

            modelBuilder.Entity("FlightApp.Backend.Models.Domain.User", b =>
                {
                    b.HasOne("FlightApp.Backend.Models.Domain.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId");
                });

            modelBuilder.Entity("FlightApp.Backend.Models.Domain.UserFlight", b =>
                {
                    b.HasOne("FlightApp.Backend.Models.Domain.Flight", "Flight")
                        .WithMany("Attendances")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlightApp.Backend.Models.Domain.User", "User")
                        .WithMany("UserFlights")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FlightApp.Backend.Models.Domain.Passenger", b =>
                {
                    b.HasOne("FlightApp.Backend.Models.Domain.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId");
                });
#pragma warning restore 612, 618
        }
    }
}
